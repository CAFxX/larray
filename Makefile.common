TARGET:=target
SRC:=src/main/scala

ifndef JAVA_HOME
$(error Set JAVA_HOME environment variable)
endif

JAVA  := "$$JAVA_HOME/bin/java"
JAVAC := "$$JAVA_HOME/bin/javac" 
JAVAH := "$$JAVA_HOME/bin/javah"

UTIL:=$(TARGET)/util

OSINFO_CLASS := xerial.larray.impl.OSInfo
OSINFO_PROG := $(UTIL)/xerial/larray/impl/OSInfo.class

## building OSInfo.java
osinfo: $(OSINFO_PROG)

$(OSINFO_PROG):
	-mkdir -p $(@D)
	$(info compiling OSInfo.java)
	$(JAVAC) $(SRC)/xerial/larray/impl/OSInfo.java -d $(UTIL)

OS_NAME := $(shell $(JAVA) -cp $(UTIL) $(OSINFO_CLASS) --os)
OS_ARCH := $(shell $(JAVA) -cp $(UTIL) $(OSINFO_CLASS) --arch)

# Windows uses different path separator-)
ifeq ($(OS_NAME),Windows)
	sep := ;
else
	sep := :
endif


jni_md := $(shell find -L "$(JAVA_HOME)" -name jni_md.h)
ifneq ($(jni_md),)
jni_include := $(shell dirname "$(jni_md)")
endif


# os=Default is meant to be generic unix/linux

known_os_archs := Linux-i386 Linux-amd64 Linux-arm Linux-armhf Mac-i386 Mac-x86_64 Windows-x86 Windows-amd64
os_arch := $(OS_NAME)-$(OS_ARCH)

ifeq (,$(findstring $(strip $(os_arch)),$(known_os_archs)))
  os_arch := Default
endif

# cross-compilation toolchain prefix (e.g. "arm-linux-gnueabi-")
CROSS_PREFIX :=

Default_CC          := $(CROSS_PREFIX)gcc
Default_STRIP        := $(CROSS_PREFIX)strip
Default_CFLAGS     := -I$(JAVA_HOME)/include -Iinclude/inc_mac -O2 -fPIC -fvisibility=hidden
Default_LINKFLAGS    := -shared -static
Default_LIBNAME      := liblarray.so

Linux-i386_CC       := $(CROSS_PREFIX)gcc
Linux-i386_STRIP     := $(CROSS_PREFIX)strip
Linux-i386_CFLAGS  := -include include/inc_linux/jni_md.h -I$(JAVA_HOME)/include -O2 -fPIC -fvisibility=hidden -m32
Linux-i386_LINKFLAGS := -shared -static-libgcc
Linux-i386_LIBNAME   := liblarray.so

Linux-amd64_CC       := $(CROSS_PREFIX)gcc
Linux-amd64_STRIP     := $(CROSS_PREFIX)strip
Linux-amd64_CFLAGS  := -include include/inc_linux/jni_md.h -I$(JAVA_HOME)/include -O2 -fPIC -fvisibility=hidden -m64
Linux-amd64_LINKFLAGS := -shared -static-libgcc 
Linux-amd64_LIBNAME   := liblarray.so

# '-include lib/inc_linux/jni_md.h' is used to force the use of our version,
# which defines JNIEXPORT differently; otherwise, since OpenJDK includes
# jni_md.h in same directory as jni.h, the include path is ignored when
# jni_md.h is included from jni.h

Linux-arm_C       := $(CROSS_PREFIX)gcc
Linux-arm_STRIP     := $(CROSS_PREFIX)strip
Linux-arm_CFLAGS  := -include include/inc_linux/jni_md.h -I$(JAVA_HOME)/include -O2 -fPIC -fvisibility=hidden -mfloat-abi=softfp
Linux-arm_LINKFLAGS := -shared -static-libgcc
Linux-arm_LIBNAME   := liblarray.so

Linux-armhf_CC       := $(CROSS_PREFIX)gcc
Linux-armhf_STRIP     := $(CROSS_PREFIX)strip
Linux-armhf_CFLAGS  := -include include/inc_linux/jni_md.h -I$(JAVA_HOME)/include -O2 -fPIC -fvisibility=hidden -mfloat-abi=hard
Linux-armhf_LINKFLAGS := -shared -static-libgcc
Linux-armhf_LIBNAME   := liblarray.so

Mac-i386_CC       := gcc -arch $(OS_ARCH)
Mac-i386_STRIP     := strip -x
Mac-i386_CFLAGS  := -Iinclude/inc_mac -I$(JAVA_HOME)/include -O2 -fPIC -mmacosx-version-min=10.4 -fvisibility=hidden
Mac-i386_LINKFLAGS := -dynamiclib -static-libgcc
Mac-i386_LIBNAME   := liblarray.jnilib

Mac-x86_64_CC       := gcc -arch $(OS_ARCH)
Mac-x86_64_STRIP     := strip -x
Mac-x86_64_CFLAGS  := -Iinclude/inc_mac -I$(JAVA_HOME)/include -O2 -fPIC -mmacosx-version-min=10.5 -fvisibility=hidden
Mac-x86_64_LINKFLAGS := -dynamiclib -static-libgcc 
Mac-x86_64_LIBNAME   := liblarray.jnilib

Windows-x86_CC          := $(CROSS_PREFIX)gcc
Windows-x86_STRIP        := $(CROSS_PREFIX)strip
Windows-x86_CFLAGS     := -Iinclude/inc_win -O2
Windows-x86_LINKFLAGS    := -Wl,--kill-at -shared -static
Windows-x86_LIBNAME      := larray.dll

Windows-amd64_CC          := $(CROSS_PREFIX)gcc
Windows-amd64_STRIP        := $(CROSS_PREFIX)strip
Windows-amd64_CFLAGS     := -Iinclude/inc_win -O2
Windows-amd64_LINKFLAGS    := -Wl,--kill-at -shared -static 
Windows-amd64_LIBNAME      := larray.dll


CC        := $($(os_arch)_CC)
STRIP     := $($(os_arch)_STRIP)
CFLAGS    := $($(os_arch)_CFLAGS)
LINKFLAGS := $($(os_arch)_LINKFLAGS) 
LIBNAME   := $($(os_arch)_LIBNAME)


CFLAGS := $(CFLAGS) -Iinclude
ifneq ($(jni_include),)
CFLAGS := $(CFLAGS) -I"$(jni_include)"
endif

